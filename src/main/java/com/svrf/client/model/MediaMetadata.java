/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.svrf.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Metadata about the Media
 */
@ApiModel(description = "Metadata about the Media")

public class MediaMetadata {
  @SerializedName("hasBlendShapes")
  private Boolean hasBlendShapes = null;

  @SerializedName("isFaceFilter")
  private Boolean isFaceFilter = null;

  @SerializedName("requiresBlendShapes")
  private Boolean requiresBlendShapes = null;

  public MediaMetadata hasBlendShapes(Boolean hasBlendShapes) {
    this.hasBlendShapes = hasBlendShapes;
    return this;
  }

   /**
   * For 3D Media, denotes that this model contains blend shapes, but having to calculate and apply weights to them is not required. These are models like glasses, hats, and billboards that do not react to face movement.
   * @return hasBlendShapes
  **/
  @ApiModelProperty(value = "For 3D Media, denotes that this model contains blend shapes, but having to calculate and apply weights to them is not required. These are models like glasses, hats, and billboards that do not react to face movement.")
  public Boolean isHasBlendShapes() {
    return hasBlendShapes;
  }

  public void setHasBlendShapes(Boolean hasBlendShapes) {
    this.hasBlendShapes = hasBlendShapes;
  }

  public MediaMetadata isFaceFilter(Boolean isFaceFilter) {
    this.isFaceFilter = isFaceFilter;
    return this;
  }

   /**
   * For 3D Media, denotes that this model can be applied as a Face Filter overlay on a video of a face.
   * @return isFaceFilter
  **/
  @ApiModelProperty(value = "For 3D Media, denotes that this model can be applied as a Face Filter overlay on a video of a face.")
  public Boolean isIsFaceFilter() {
    return isFaceFilter;
  }

  public void setIsFaceFilter(Boolean isFaceFilter) {
    this.isFaceFilter = isFaceFilter;
  }

  public MediaMetadata requiresBlendShapes(Boolean requiresBlendShapes) {
    this.requiresBlendShapes = requiresBlendShapes;
    return this;
  }

   /**
   * For 3D Media, denotes that calculating and applying blend shape weights to this model is _required_ for the correct experience. If your platform cannot detect and calculate blend shape weights you MUST NOT present these models to your users.
   * @return requiresBlendShapes
  **/
  @ApiModelProperty(value = "For 3D Media, denotes that calculating and applying blend shape weights to this model is _required_ for the correct experience. If your platform cannot detect and calculate blend shape weights you MUST NOT present these models to your users.")
  public Boolean isRequiresBlendShapes() {
    return requiresBlendShapes;
  }

  public void setRequiresBlendShapes(Boolean requiresBlendShapes) {
    this.requiresBlendShapes = requiresBlendShapes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaMetadata mediaMetadata = (MediaMetadata) o;
    return Objects.equals(this.hasBlendShapes, mediaMetadata.hasBlendShapes) &&
        Objects.equals(this.isFaceFilter, mediaMetadata.isFaceFilter) &&
        Objects.equals(this.requiresBlendShapes, mediaMetadata.requiresBlendShapes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasBlendShapes, isFaceFilter, requiresBlendShapes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaMetadata {\n");
    
    sb.append("    hasBlendShapes: ").append(toIndentedString(hasBlendShapes)).append("\n");
    sb.append("    isFaceFilter: ").append(toIndentedString(isFaceFilter)).append("\n");
    sb.append("    requiresBlendShapes: ").append(toIndentedString(requiresBlendShapes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

