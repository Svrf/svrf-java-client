/*
 * SVRF API
 * # Getting Started  SVRF's API allows you to supercharge your project or app with the first and largest search engine for immersive experiences. We make it simple for any developer to incorporate highly immersive experiences with all kinds of applications: virtual reality, augmented reality, mixed reality, mobile, and web.  The SVRF API is based on REST principles, allowing it to integrate cross-platform. Our endpoints return responses in [JSON][]. We support [CORS][], allowing you to access immersive experiences indexed by SVRF on your own web domains. We provide a variety of resolutions, projections, and file formats to support most modern clients.  The SVRF API Documentation is available at [https://developers.svrf.com][SVRF Dev].  ## Access and API Keys  The SVRF API is currently in private beta and access is limited to select partners. If you are interested in using the SVRF API for your app or project, please contact us at [api@svrf.com][API Email]. We cannot guarantee immediate access for all requests, but we will announce a public release in the coming months.  See our [terms of service][TOS] for restrictions on using the SVRF API.  If you have any questions please contact us at [api@svrf.com][API Email]. Submit API corrections via [GitHub Issues][].  ## API Highlights  ### Search Endpoint  The [SVRF Search Endpoint][Docs Search] brings the power of immersive search found on [SVRF.com][SVRF] to your app or project. Our search engine enables your users to instantly find the immersive experience they are seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality and most relevant search results are returned first.  ### Trending Endpoint  The [SVRF Trending Endpoint][Docs Trending] provides your app or project with the hottest immersive content - curated by real humans. The experiences returned mirror the [SVRF homepage][SVRF], from timely cultural content to trending pop-culture references. The experiences are updated regularly to ensure users always get a fresh list of immersive content.  ## API Libraries  You can use SVRF API libraries to encapsulate endpoint requests: * [C#][CSharp] * [Java][Java] * [JavaScript][JavaScript] * [Objective C][Objective C] * [Swift][Swift]  ## Attribution  ### Authors and Site Credit  At SVRF, we believe in giving credit where credit is due. Do your best to provide attribution to the `authors` and `site` where the content originated. We suggest using the format: __by {authors} via {site}__.  If possible, provide a way for users to discover and visit the page the content originally came from (`url`).  ### Powered By SVRF  As per section 5a of the [terms of service][TOS], __we require all apps that use the SVRF API to conspicuously display \"Powered By SVRF\" attribution marks where the API is utilized.__  ## Rate Limits  The SVRF API has a generous rate limit to ensure the best experience for your users. We rate limit by IP address with a maximum of 100 requests per second. If you exceed this rate limit, requests will be blocked for 60 seconds. Requests blocked by the rate limit will return with status code `429`.  [API Email]: mailto:api@svrf.com [CORS]: https://en.wikipedia.org/wiki/Cross-origin_resource_sharing [CSharp]: https://www.nuget.org/packages/SVRF.Client [Docs Search]: https://developers.svrf.com/#tag/Media/paths/~1vr~1search?q={q}/get [Docs Trending]: https://developers.svrf.com/#tag/Media/paths/~1vr~1trending/get [GitHub Issues]: https://github.com/Svrf/svrf-api/issues [Java]: https://mvnrepository.com/artifact/com.svrf/svrf-client [JavaScript]: https://www.npmjs.com/package/svrf-client [JSON]: http://www.json.org/ [Objective C]: https://cocoapods.org/pods/SVRFClient [SVRF]: https://www.svrf.com [SVRF Dev]: https://developers.svrf.com [Swift]: https://cocoapods.org/pods/SVRFClientSwift [TOS]: https://www.svrf.com/terms 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.svrf.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Resized versions of the Media, matching the Media&#39;s type, in stereo. Only included if the Media is stereoscopic. Resolutions larger than the original size will not be included (the original is included as &#x60;max&#x60;).
 */
@ApiModel(description = "Resized versions of the Media, matching the Media's type, in stereo. Only included if the Media is stereoscopic. Resolutions larger than the original size will not be included (the original is included as `max`).")

public class MediaStereo {
  @SerializedName("848")
  private String _848 = null;

  @SerializedName("1440")
  private String _1440 = null;

  @SerializedName("2160")
  private String _2160 = null;

  @SerializedName("4096")
  private String _4096 = null;

  @SerializedName("hls")
  private String hls = null;

  @SerializedName("max")
  private String max = null;

  public MediaStereo _848(String _848) {
    this._848 = _848;
    return this;
  }

   /**
   * 848px wide video with a 1.3MBps video rate, 96KBps audio rate. Only included if the Media is a &#x60;video&#x60;.
   * @return _848
  **/
  @ApiModelProperty(value = "848px wide video with a 1.3MBps video rate, 96KBps audio rate. Only included if the Media is a `video`.")
  public String get848() {
    return _848;
  }

  public void set848(String _848) {
    this._848 = _848;
  }

  public MediaStereo _1440(String _1440) {
    this._1440 = _1440;
    return this;
  }

   /**
   * 1440px wide video with a 4.4MBps video rate, 128KBps audio rate. Only included if the Media is a &#x60;video&#x60;.
   * @return _1440
  **/
  @ApiModelProperty(value = "1440px wide video with a 4.4MBps video rate, 128KBps audio rate. Only included if the Media is a `video`.")
  public String get1440() {
    return _1440;
  }

  public void set1440(String _1440) {
    this._1440 = _1440;
  }

  public MediaStereo _2160(String _2160) {
    this._2160 = _2160;
    return this;
  }

   /**
   * 2160px wide video with a 10MBps video rate, 192KBps audio rate. Only included if the Media is a &#x60;video&#x60;.
   * @return _2160
  **/
  @ApiModelProperty(value = "2160px wide video with a 10MBps video rate, 192KBps audio rate. Only included if the Media is a `video`.")
  public String get2160() {
    return _2160;
  }

  public void set2160(String _2160) {
    this._2160 = _2160;
  }

  public MediaStereo _4096(String _4096) {
    this._4096 = _4096;
    return this;
  }

   /**
   * 4096px wide image. This image should be used on mobile devices, as larger images may cause some devices to crash. Only included if the Media is a &#x60;photo&#x60;.
   * @return _4096
  **/
  @ApiModelProperty(value = "4096px wide image. This image should be used on mobile devices, as larger images may cause some devices to crash. Only included if the Media is a `photo`.")
  public String get4096() {
    return _4096;
  }

  public void set4096(String _4096) {
    this._4096 = _4096;
  }

  public MediaStereo hls(String hls) {
    this.hls = hls;
    return this;
  }

   /**
   * URL for an HLS master playlist containing streams in all of the above resolutions which are no wider than the original Media. Only included if the Media is a &#x60;video&#x60;.
   * @return hls
  **/
  @ApiModelProperty(value = "URL for an HLS master playlist containing streams in all of the above resolutions which are no wider than the original Media. Only included if the Media is a `video`.")
  public String getHls() {
    return hls;
  }

  public void setHls(String hls) {
    this.hls = hls;
  }

  public MediaStereo max(String max) {
    this.max = max;
    return this;
  }

   /**
   * The Media in its largest available size (the original size).
   * @return max
  **/
  @ApiModelProperty(value = "The Media in its largest available size (the original size).")
  public String getMax() {
    return max;
  }

  public void setMax(String max) {
    this.max = max;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaStereo mediaStereo = (MediaStereo) o;
    return Objects.equals(this._848, mediaStereo._848) &&
        Objects.equals(this._1440, mediaStereo._1440) &&
        Objects.equals(this._2160, mediaStereo._2160) &&
        Objects.equals(this._4096, mediaStereo._4096) &&
        Objects.equals(this.hls, mediaStereo.hls) &&
        Objects.equals(this.max, mediaStereo.max);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_848, _1440, _2160, _4096, hls, max);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaStereo {\n");
    
    sb.append("    _848: ").append(toIndentedString(_848)).append("\n");
    sb.append("    _1440: ").append(toIndentedString(_1440)).append("\n");
    sb.append("    _2160: ").append(toIndentedString(_2160)).append("\n");
    sb.append("    _4096: ").append(toIndentedString(_4096)).append("\n");
    sb.append("    hls: ").append(toIndentedString(hls)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

