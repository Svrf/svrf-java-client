/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.svrf.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.svrf.client.model.MediaImages;
import com.svrf.client.model.MediaStereo;
import com.svrf.client.model.MediaVideos;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Various sizes of images and resolutions for the Media. They will never be larger than the Media source&#39;s original resolution.
 */
@ApiModel(description = "Various sizes of images and resolutions for the Media. They will never be larger than the Media source's original resolution.")

public class MediaFiles {
  @SerializedName("glb")
  private String glb = null;

  @SerializedName("glb-draco")
  private String glbDraco = null;

  @SerializedName("gltf")
  private Map<String, String> gltf = null;

  @SerializedName("images")
  private MediaImages images = null;

  @SerializedName("stereo")
  private MediaStereo stereo = null;

  @SerializedName("videos")
  private MediaVideos videos = null;

  public MediaFiles glb(String glb) {
    this.glb = glb;
    return this;
  }

   /**
   * This is the binary glTF format that should be used by clients if the Media is a 3D object. This is the preferred format to use on end-user devices.
   * @return glb
  **/
  @ApiModelProperty(value = "This is the binary glTF format that should be used by clients if the Media is a 3D object. This is the preferred format to use on end-user devices.")
  public String getGlb() {
    return glb;
  }

  public void setGlb(String glb) {
    this.glb = glb;
  }

  public MediaFiles glbDraco(String glbDraco) {
    this.glbDraco = glbDraco;
    return this;
  }

   /**
   * This is the binary glTF format, with additional DRACO compression, that should be used by clients if the Media is a 3D object. Your renderer must support the KHR_draco_mesh_compression extension to use this model.
   * @return glbDraco
  **/
  @ApiModelProperty(value = "This is the binary glTF format, with additional DRACO compression, that should be used by clients if the Media is a 3D object. Your renderer must support the KHR_draco_mesh_compression extension to use this model.")
  public String getGlbDraco() {
    return glbDraco;
  }

  public void setGlbDraco(String glbDraco) {
    this.glbDraco = glbDraco;
  }

  public MediaFiles gltf(Map<String, String> gltf) {
    this.gltf = gltf;
    return this;
  }

  public MediaFiles putGltfItem(String key, String gltfItem) {
    if (this.gltf == null) {
      this.gltf = new HashMap<String, String>();
    }
    this.gltf.put(key, gltfItem);
    return this;
  }

   /**
   * A map of file names to urls where those files are hosted. The file names are relative and their name heirarchy should be respected when saving them locally.
   * @return gltf
  **/
  @ApiModelProperty(value = "A map of file names to urls where those files are hosted. The file names are relative and their name heirarchy should be respected when saving them locally.")
  public Map<String, String> getGltf() {
    return gltf;
  }

  public void setGltf(Map<String, String> gltf) {
    this.gltf = gltf;
  }

  public MediaFiles images(MediaImages images) {
    this.images = images;
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @ApiModelProperty(value = "")
  public MediaImages getImages() {
    return images;
  }

  public void setImages(MediaImages images) {
    this.images = images;
  }

  public MediaFiles stereo(MediaStereo stereo) {
    this.stereo = stereo;
    return this;
  }

   /**
   * Get stereo
   * @return stereo
  **/
  @ApiModelProperty(value = "")
  public MediaStereo getStereo() {
    return stereo;
  }

  public void setStereo(MediaStereo stereo) {
    this.stereo = stereo;
  }

  public MediaFiles videos(MediaVideos videos) {
    this.videos = videos;
    return this;
  }

   /**
   * Get videos
   * @return videos
  **/
  @ApiModelProperty(value = "")
  public MediaVideos getVideos() {
    return videos;
  }

  public void setVideos(MediaVideos videos) {
    this.videos = videos;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaFiles mediaFiles = (MediaFiles) o;
    return Objects.equals(this.glb, mediaFiles.glb) &&
        Objects.equals(this.glbDraco, mediaFiles.glbDraco) &&
        Objects.equals(this.gltf, mediaFiles.gltf) &&
        Objects.equals(this.images, mediaFiles.images) &&
        Objects.equals(this.stereo, mediaFiles.stereo) &&
        Objects.equals(this.videos, mediaFiles.videos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(glb, glbDraco, gltf, images, stereo, videos);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaFiles {\n");
    
    sb.append("    glb: ").append(toIndentedString(glb)).append("\n");
    sb.append("    glbDraco: ").append(toIndentedString(glbDraco)).append("\n");
    sb.append("    gltf: ").append(toIndentedString(gltf)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    stereo: ").append(toIndentedString(stereo)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

